/*
 * This file is generated by jOOQ.
 */
package com.dg.heptensecretsanta.tables;


import com.dg.heptensecretsanta.Keys;
import com.dg.heptensecretsanta.Public;
import com.dg.heptensecretsanta.tables.records.GiftThemeUserMappingRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GiftThemeUserMapping extends TableImpl<GiftThemeUserMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.gift_theme_user_mapping</code>
     */
    public static final GiftThemeUserMapping GIFT_THEME_USER_MAPPING = new GiftThemeUserMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GiftThemeUserMappingRecord> getRecordType() {
        return GiftThemeUserMappingRecord.class;
    }

    /**
     * The column <code>public.gift_theme_user_mapping.user_id</code>.
     */
    public final TableField<GiftThemeUserMappingRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.gift_theme_user_mapping.room_id</code>.
     */
    public final TableField<GiftThemeUserMappingRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.gift_theme_user_mapping.gift_theme_id</code>.
     */
    public final TableField<GiftThemeUserMappingRecord, Integer> GIFT_THEME_ID = createField(DSL.name("gift_theme_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.gift_theme_user_mapping.gift_attribute</code>.
     */
    public final TableField<GiftThemeUserMappingRecord, String> GIFT_ATTRIBUTE = createField(DSL.name("gift_attribute"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private GiftThemeUserMapping(Name alias, Table<GiftThemeUserMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private GiftThemeUserMapping(Name alias, Table<GiftThemeUserMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.gift_theme_user_mapping</code> table
     * reference
     */
    public GiftThemeUserMapping(String alias) {
        this(DSL.name(alias), GIFT_THEME_USER_MAPPING);
    }

    /**
     * Create an aliased <code>public.gift_theme_user_mapping</code> table
     * reference
     */
    public GiftThemeUserMapping(Name alias) {
        this(alias, GIFT_THEME_USER_MAPPING);
    }

    /**
     * Create a <code>public.gift_theme_user_mapping</code> table reference
     */
    public GiftThemeUserMapping() {
        this(DSL.name("gift_theme_user_mapping"), null);
    }

    public <O extends Record> GiftThemeUserMapping(Table<O> child, ForeignKey<O, GiftThemeUserMappingRecord> key) {
        super(child, key, GIFT_THEME_USER_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GiftThemeUserMappingRecord> getPrimaryKey() {
        return Keys.GIFT_THEME_USER_MAPPING_PK;
    }

    @Override
    public List<ForeignKey<GiftThemeUserMappingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_USER_FK, Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_ROOM_FK, Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_GIFT_THEME_FK);
    }

    private transient User _user;
    private transient Room _room;
    private transient GiftTheme _giftTheme;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_USER_FK);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>public.room</code> table.
     */
    public Room room() {
        if (_room == null)
            _room = new Room(this, Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_ROOM_FK);

        return _room;
    }

    /**
     * Get the implicit join path to the <code>public.gift_theme</code> table.
     */
    public GiftTheme giftTheme() {
        if (_giftTheme == null)
            _giftTheme = new GiftTheme(this, Keys.GIFT_THEME_USER_MAPPING__GIFT_THEME_USER_MAPPING_GIFT_THEME_FK);

        return _giftTheme;
    }

    @Override
    public GiftThemeUserMapping as(String alias) {
        return new GiftThemeUserMapping(DSL.name(alias), this);
    }

    @Override
    public GiftThemeUserMapping as(Name alias) {
        return new GiftThemeUserMapping(alias, this);
    }

    @Override
    public GiftThemeUserMapping as(Table<?> alias) {
        return new GiftThemeUserMapping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GiftThemeUserMapping rename(String name) {
        return new GiftThemeUserMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GiftThemeUserMapping rename(Name name) {
        return new GiftThemeUserMapping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GiftThemeUserMapping rename(Table<?> name) {
        return new GiftThemeUserMapping(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
