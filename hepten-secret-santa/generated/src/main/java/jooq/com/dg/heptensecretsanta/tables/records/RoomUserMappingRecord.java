/*
 * This file is generated by jOOQ.
 */
package com.dg.heptensecretsanta.tables.records;


import com.dg.heptensecretsanta.tables.RoomUserMapping;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoomUserMappingRecord extends UpdatableRecordImpl<RoomUserMappingRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.room_user_mapping.room_id</code>.
     */
    public void setRoomId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.room_user_mapping.room_id</code>.
     */
    public Integer getRoomId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.room_user_mapping.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.room_user_mapping.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.room_user_mapping.give_to</code>.
     */
    public void setGiveTo(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.room_user_mapping.give_to</code>.
     */
    public Integer getGiveTo() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RoomUserMapping.ROOM_USER_MAPPING.ROOM_ID;
    }

    @Override
    public Field<Integer> field2() {
        return RoomUserMapping.ROOM_USER_MAPPING.USER_ID;
    }

    @Override
    public Field<Integer> field3() {
        return RoomUserMapping.ROOM_USER_MAPPING.GIVE_TO;
    }

    @Override
    public Integer component1() {
        return getRoomId();
    }

    @Override
    public Integer component2() {
        return getUserId();
    }

    @Override
    public Integer component3() {
        return getGiveTo();
    }

    @Override
    public Integer value1() {
        return getRoomId();
    }

    @Override
    public Integer value2() {
        return getUserId();
    }

    @Override
    public Integer value3() {
        return getGiveTo();
    }

    @Override
    public RoomUserMappingRecord value1(Integer value) {
        setRoomId(value);
        return this;
    }

    @Override
    public RoomUserMappingRecord value2(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public RoomUserMappingRecord value3(Integer value) {
        setGiveTo(value);
        return this;
    }

    @Override
    public RoomUserMappingRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoomUserMappingRecord
     */
    public RoomUserMappingRecord() {
        super(RoomUserMapping.ROOM_USER_MAPPING);
    }

    /**
     * Create a detached, initialised RoomUserMappingRecord
     */
    public RoomUserMappingRecord(Integer roomId, Integer userId, Integer giveTo) {
        super(RoomUserMapping.ROOM_USER_MAPPING);

        setRoomId(roomId);
        setUserId(userId);
        setGiveTo(giveTo);
    }

    /**
     * Create a detached, initialised RoomUserMappingRecord
     */
    public RoomUserMappingRecord(com.dg.heptensecretsanta.tables.pojos.RoomUserMapping value) {
        super(RoomUserMapping.ROOM_USER_MAPPING);

        if (value != null) {
            setRoomId(value.getRoomId());
            setUserId(value.getUserId());
            setGiveTo(value.getGiveTo());
        }
    }
}
