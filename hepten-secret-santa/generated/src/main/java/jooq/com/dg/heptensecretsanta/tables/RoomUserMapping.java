/*
 * This file is generated by jOOQ.
 */
package com.dg.heptensecretsanta.tables;


import com.dg.heptensecretsanta.Keys;
import com.dg.heptensecretsanta.Public;
import com.dg.heptensecretsanta.tables.records.RoomUserMappingRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoomUserMapping extends TableImpl<RoomUserMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.room_user_mapping</code>
     */
    public static final RoomUserMapping ROOM_USER_MAPPING = new RoomUserMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomUserMappingRecord> getRecordType() {
        return RoomUserMappingRecord.class;
    }

    /**
     * The column <code>public.room_user_mapping.room_id</code>.
     */
    public final TableField<RoomUserMappingRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.room_user_mapping.user_id</code>.
     */
    public final TableField<RoomUserMappingRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.room_user_mapping.give_to</code>.
     */
    public final TableField<RoomUserMappingRecord, Integer> GIVE_TO = createField(DSL.name("give_to"), SQLDataType.INTEGER, this, "");

    private RoomUserMapping(Name alias, Table<RoomUserMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoomUserMapping(Name alias, Table<RoomUserMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.room_user_mapping</code> table reference
     */
    public RoomUserMapping(String alias) {
        this(DSL.name(alias), ROOM_USER_MAPPING);
    }

    /**
     * Create an aliased <code>public.room_user_mapping</code> table reference
     */
    public RoomUserMapping(Name alias) {
        this(alias, ROOM_USER_MAPPING);
    }

    /**
     * Create a <code>public.room_user_mapping</code> table reference
     */
    public RoomUserMapping() {
        this(DSL.name("room_user_mapping"), null);
    }

    public <O extends Record> RoomUserMapping(Table<O> child, ForeignKey<O, RoomUserMappingRecord> key) {
        super(child, key, ROOM_USER_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RoomUserMappingRecord> getPrimaryKey() {
        return Keys.ROOM_USER_MAPPING_PK;
    }

    @Override
    public List<ForeignKey<RoomUserMappingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROOM_USER_MAPPING__ROOM_FK, Keys.ROOM_USER_MAPPING__USER_FK);
    }

    private transient Room _room;
    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.room</code> table.
     */
    public Room room() {
        if (_room == null)
            _room = new Room(this, Keys.ROOM_USER_MAPPING__ROOM_FK);

        return _room;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.ROOM_USER_MAPPING__USER_FK);

        return _user;
    }

    @Override
    public RoomUserMapping as(String alias) {
        return new RoomUserMapping(DSL.name(alias), this);
    }

    @Override
    public RoomUserMapping as(Name alias) {
        return new RoomUserMapping(alias, this);
    }

    @Override
    public RoomUserMapping as(Table<?> alias) {
        return new RoomUserMapping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoomUserMapping rename(String name) {
        return new RoomUserMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoomUserMapping rename(Name name) {
        return new RoomUserMapping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoomUserMapping rename(Table<?> name) {
        return new RoomUserMapping(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
