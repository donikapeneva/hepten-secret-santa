/*
 * This file is generated by jOOQ.
 */
package com.dg.heptensecretsanta.tables.records;


import com.dg.heptensecretsanta.tables.NicknameUserMapping;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NicknameUserMappingRecord extends UpdatableRecordImpl<NicknameUserMappingRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.nickname_user_mapping.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.nickname_user_mapping.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.nickname_user_mapping.room_id</code>.
     */
    public void setRoomId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.nickname_user_mapping.room_id</code>.
     */
    public Integer getRoomId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.nickname_user_mapping.nickname</code>.
     */
    public void setNickname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.nickname_user_mapping.nickname</code>.
     */
    public String getNickname() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return NicknameUserMapping.NICKNAME_USER_MAPPING.USER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return NicknameUserMapping.NICKNAME_USER_MAPPING.ROOM_ID;
    }

    @Override
    public Field<String> field3() {
        return NicknameUserMapping.NICKNAME_USER_MAPPING.NICKNAME;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public Integer component2() {
        return getRoomId();
    }

    @Override
    public String component3() {
        return getNickname();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public Integer value2() {
        return getRoomId();
    }

    @Override
    public String value3() {
        return getNickname();
    }

    @Override
    public NicknameUserMappingRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public NicknameUserMappingRecord value2(Integer value) {
        setRoomId(value);
        return this;
    }

    @Override
    public NicknameUserMappingRecord value3(String value) {
        setNickname(value);
        return this;
    }

    @Override
    public NicknameUserMappingRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NicknameUserMappingRecord
     */
    public NicknameUserMappingRecord() {
        super(NicknameUserMapping.NICKNAME_USER_MAPPING);
    }

    /**
     * Create a detached, initialised NicknameUserMappingRecord
     */
    public NicknameUserMappingRecord(Integer userId, Integer roomId, String nickname) {
        super(NicknameUserMapping.NICKNAME_USER_MAPPING);

        setUserId(userId);
        setRoomId(roomId);
        setNickname(nickname);
    }

    /**
     * Create a detached, initialised NicknameUserMappingRecord
     */
    public NicknameUserMappingRecord(com.dg.heptensecretsanta.tables.pojos.NicknameUserMapping value) {
        super(NicknameUserMapping.NICKNAME_USER_MAPPING);

        if (value != null) {
            setUserId(value.getUserId());
            setRoomId(value.getRoomId());
            setNickname(value.getNickname());
        }
    }
}
